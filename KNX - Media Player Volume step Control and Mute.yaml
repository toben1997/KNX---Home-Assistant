blueprint:
  name: KNX - Media Player Volume step Control and Mute (by toben1997)
  description: 'Use KNX to control the volume of a Home Assistant media player entity
    with optional state feedback.

    This blueprint allows you to select which media player should be controlled and
    provides input fields for the KNX group addresses:

    - One address for stepwise volume control (0 for decrease, 1 for increase), with
    a slider to set the number of steps.

    - One address for mute control (0 for unmute, 1 for mute).

    - One address for mute state feedback (0 for unmute, 1 for mute).

    Each address has an option to invert the received/sent values.

    '
  author: toben1997
  source_url: https://github.com/toben1997/home-assistant-knx-blueprint-edits-and-colevtion/blob/main/knx-mediaplayer-volume-control.yaml
  domain: automation
  input:
    media_player_entity:
      name: Media Player Entity
      description: 'Choose the media player to control via KNX.

        '
      selector:
        entity:
          domain:
          - media_player
          multiple: false
    knx_volume_step_address:
      name: KNX Volume Step Group Address
      description: 'Group address for stepwise volume control (0 for decrease, 1 for
        increase). DPT 1.001. Example: ''1/0/4'' (leave empty if unused).

        '
      default: ''
    knx_volume_step_invert:
      name: Invert KNX Volume Step Address
      description: 'Invert the received value for volume step control (1 for decrease,
        0 for increase).

        '
      default: false
      selector:
        boolean: {}
    volume_steps:
      name: Volume Steps
      description: 'Number of steps to increase or decrease the volume.

        '
      selector:
        number:
          min: 1.0
          max: 10.0
          step: 1.0
          unit_of_measurement: steps
          mode: slider
      default: 1
    knx_mute_address:
      name: KNX Mute Group Address
      description: 'Group address for controlling mute (0 for unmute, 1 for mute).
        DPT 1.001. Example: ''1/0/5'' (leave empty if unused).

        '
      default: ''
    knx_mute_invert:
      name: Invert KNX Mute Address
      description: 'Invert the received value for mute control (1 for unmute, 0 for
        mute).

        '
      default: false
      selector:
        boolean: {}
    knx_mute_state_address:
      name: KNX Mute State Group Address
      description: 'Group address to send feedback of the mute state (0 for unmute,
        1 for mute). DPT 1.001. Example: ''1/4/5'' (leave empty if unused).

        '
      default: ''
    knx_mute_state_invert:
      name: Invert KNX Mute State Address
      description: 'Invert the sent value for mute state feedback (1 for unmute, 0
        for mute).

        '
      default: false
      selector:
        boolean: {}
mode: parallel
max_exceeded: silent
variables:
  media_player_entity: !input media_player_entity
  knx_volume_step_address: !input knx_volume_step_address
  knx_volume_step_invert: !input knx_volume_step_invert
  volume_steps: !input volume_steps
  knx_mute_address: !input knx_mute_address
  knx_mute_invert: !input knx_mute_invert
  knx_mute_state_address: !input knx_mute_state_address
  knx_mute_state_invert: !input knx_mute_state_invert
  last_mute_state: '{{ is_state_attr(media_player_entity, ''is_volume_muted'', true)
    }}'
trigger:
- platform: homeassistant
  event: start
  id: initialize
- platform: event
  event_type: automation_reloaded
  id: initialize
- platform: event
  event_type: service_registered
  event_data:
    domain: knx
    service: event_register
  id: initialize
- platform: state
  entity_id: !input media_player_entity
  id: media_player_entity
- platform: event
  event_type: knx_event
  event_data:
    destination: !input knx_volume_step_address
    telegramtype: GroupValueWrite
    direction: Incoming
  id: knx_volume_step_address
- platform: event
  event_type: knx_event
  event_data:
    destination: !input knx_mute_address
    telegramtype: GroupValueWrite
    direction: Incoming
  id: knx_mute_address
- platform: event
  event_type: knx_event
  event_data:
    destination: !input knx_mute_state_address
    telegramtype: GroupValueRead
    direction: Incoming
  id: knx_mute_state_address
action:
- choose:
  - conditions:
    - condition: trigger
      id: initialize
    sequence:
    - choose:
      - conditions:
        - condition: template
          value_template: '{{ knx_volume_step_address != '''' }}'
        sequence:
        - service: knx.event_register
          data:
            address: '{{ knx_volume_step_address }}'
    - choose:
      - conditions:
        - condition: template
          value_template: '{{ knx_mute_address != '''' }}'
        sequence:
        - service: knx.event_register
          data:
            address: '{{ knx_mute_address }}'
    - choose:
      - conditions:
        - condition: template
          value_template: '{{ knx_mute_state_address != '''' }}'
        sequence:
        - service: knx.event_register
          data:
            address: '{{ knx_mute_state_address }}'
    - variables:
        last_mute_state: '{{ is_state_attr(media_player_entity, ''is_volume_muted'',
          true) }}'
  - conditions:
    - condition: template
      value_template: '{{ trigger.platform == ''event'' and trigger.event.event_type
        == ''knx_event'' and trigger.event.data.direction == ''Incoming'' and trigger.event.data.destination
        == knx_volume_step_address }}'
    sequence:
    - choose:
      - conditions:
        - condition: template
          value_template: "{% if knx_volume_step_invert %}\n  {{ trigger.event.data.data
            | int(default=0) == 1 }}\n{% else %}\n  {{ trigger.event.data.data | int(default=0)
            == 0 }}\n{% endif %}\n"
        sequence:
        - repeat:
            count: '{{ volume_steps }}'
            sequence:
            - service: media_player.volume_down
              target:
                entity_id: '{{ media_player_entity }}'
      - conditions:
        - condition: template
          value_template: "{% if knx_volume_step_invert %}\n  {{ trigger.event.data.data
            | int(default=0) == 0 }}\n{% else %}\n  {{ trigger.event.data.data | int(default=0)
            == 1 }}\n{% endif %}\n"
        sequence:
        - repeat:
            count: '{{ volume_steps }}'
            sequence:
            - service: media_player.volume_up
              target:
                entity_id: '{{ media_player_entity }}'
  - conditions:
    - condition: template
      value_template: '{{ trigger.platform == ''event'' and trigger.event.event_type
        == ''knx_event'' and trigger.event.data.direction == ''Incoming'' and trigger.event.data.destination
        == knx_mute_address }}'
    sequence:
    - choose:
      - conditions:
        - condition: template
          value_template: "{% if knx_mute_invert %}\n  {{ trigger.event.data.data
            | int(default=0) == 0 }}\n{% else %}\n  {{ trigger.event.data.data | int(default=0)
            == 1 }}\n{% endif %}\n"
        sequence:
        - service: media_player.volume_mute
          data:
            is_volume_muted: true
          target:
            entity_id: '{{ media_player_entity }}'
      - conditions:
        - condition: template
          value_template: "{% if knx_mute_invert %}\n  {{ trigger.event.data.data
            | int(default=0) == 1 }}\n{% else %}\n  {{ trigger.event.data.data | int(default=0)
            == 0 }}\n{% endif %}\n"
        sequence:
        - service: media_player.volume_mute
          data:
            is_volume_muted: false
          target:
            entity_id: '{{ media_player_entity }}'
  - conditions:
    - condition: template
      value_template: '{{ trigger.platform == ''state'' and trigger.entity_id == media_player_entity
        }}'
    sequence:
    - choose:
      - conditions:
        - condition: template
          value_template: '{{ knx_mute_state_address != '''' and (is_state_attr(media_player_entity,
            ''is_volume_muted'', true) != last_mute_state) }}'
        sequence:
        - choose:
          - conditions:
            - condition: template
              value_template: '{{ is_state_attr(media_player_entity, ''is_volume_muted'',
                true) }}'
            sequence:
            - service: knx.send
              data:
                address: '{{ knx_mute_state_address }}'
                payload: "{% if knx_mute_state_invert %}\n  0\n{% else %}\n  1\n{%
                  endif %}\n"
                type: '1.001'
            - variables:
                last_mute_state: true
          - conditions:
            - condition: template
              value_template: '{{ is_state_attr(media_player_entity, ''is_volume_muted'',
                false) }}'
            sequence:
            - service: knx.send
              data:
                address: '{{ knx_mute_state_address }}'
                payload: "{% if knx_mute_state_invert %}\n  1\n{% else %}\n  0\n{%
                  endif %}\n"
                type: '1.001'
            - variables:
                last_mute_state: false
